**************************************************************************
** title:      Builds
** author:     Brian Frank
** created:    1 Jun 2015
** copyright:  Copyright (c) 2015, Project-Haystack
** license:    Licensed under the Academic Free License version 3.0
**************************************************************************

Overview [#overview]
********************
The source code for documentation and this website is managed as a Mercurial
repository on [BitBucket]`https://bitbucket.org/project-haystack`.  Each
official Haystack version is packaged as a self contained zip file which
can be downloaded from the [Downloads]`/download#builds` tab.  Each build
file provides:
  1. source code for all documentation and tag definitions
  2. ability to run website locally
  3. build script to rebuild docs from source

Setup [#setup]
**************
Source code and build scripts are written in the [Fantom]`http://fantom.org`
programming language.  You will need a Java VM installed to run the website
locally or rebuild from source.  Once a build is download, the easiest way
to run is by calling the 'bin/fan' launch script.

  // cd to the dir where you installed the build
  cd ~/haystack-2.0.9/

  // to run website on your local machine
  bin/fan haystackws

  // run on a port other than 8080
  bin/fan haystackws -port 8081

  // rebuild from source
  bin/fan src/build.fan

See Fantom [Setup Docs]`http://fantom.org/doc/docTools/Setup` for more information
on setting up and trouble shooting your Fantom environment.

Organization [#org]
*******************
Builds are organized with the following directory structure:

pre>
 bin/            // launch scripts
 etc/            // config files, unit/tz databases
 lib/            // runtime modules
   fan/          // Fantom pod files
   java/         // Java runtime for Fantom
 src/            // top level dir for source code
   build.fan     // top level build script
   haystackws/   // source code for the haystackws pod
     docs/       // chapter source in fandoc format
     equips/     // equip points in plain text
     fan/        // Fantom source code for website
     locale/     // localized translations of tags
     res/        // CSS, image resource files
     tags/       // tag definitions in Trio format
<pre

The website itself and all the documentation is primarily sourced
into a single pod named 'haystackws'.  The website is built upon
the Fantom runtime and a web framework nicknamed sidewalk.  These
dependencies are included in binary form in 'lib/fan'.

Design [#design]
****************
The overall design of the website is as follows:
  1.  'Main': bootstrap code which loads library and launches web service
  2.  'HaystackLoader': loads source docs and tags and compiles into 'Lib'
  3.  'Html': suite of renderers used by loader to generate HTML
  4.  'Lib': set of immutable data structures and HTML for compiled docs and tags

Doc Format [#docs]
******************
Documentation is written as plain text formatted as [fandoc]`http://fantom.org/doc/fandoc/index#overview`.

Fandoc hyperlinks are used liberally.  The following link formats are supported:
  - [point]`point`:  link to a tag
  - [TagModel]`TagModel`: link to a chapter
  - [TagModel#tagKinds]`TagModel#tagKinds`: link to a chapter with specific fragment anchor id

Tag  Format [#tags]
*******************
Tag definitions are plain text formatted as `Trio` files.  Each tag is itself
defined as a set of tags:

 - 'tag': programmatic name of the tag
 - 'kind': value type of tag or "Obj" if multiple value types are supported
 - 'doc': documentation formatted as [fandoc]`http://fantom.org/doc/fandoc/index#overview`
 - 'docInclude': chapter name with optional fragment id to include into tag documentation
 - 'alsoSee': optional set of comma separated tag names
 - 'usedWith': optional set of comma separated tag names

Here is an example for `maxVal`:

pre>
tag: maxVal
kind: Number
alsoSee: minVal, curVal
usedWith: point
docInclude: Structure#pointMinMax
doc:
  Applied to `point` to define the maximum value to read from a sensor
  or to write from a command/setpoint. This value's unit must match
  the point's `unit` tag.
<pre


