name: CI

on:
  push:
  # Reenable pull_request if we start receiving 3rd party contributions.
  # Otherwise all pull_requests will also be push test and we are enforcing
  # that code must be up to date with parent in the PRs.
  #pull_request:

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Run pre-commit
        uses: pre-commit/action@v2.0.0
        with:
          extra_args: --all-files

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        # Defaults to the latest version of MongoDB

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.2.1

      - name: Install dependencies
        run: |
          poetry install

      - name: Setup Details
        run: |
          cat /etc/issue
          python --version

      - name: Run tests with pytest
        run: |
          poetry run pytest

  # simulation-tests:
  #   name: Run simulation tests in worker
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     # only need to start the worker which saves time here because
  #     # the webpack calling on the web container for .dev.yml can take some
  #     # time.
  #     - name: Build and run stack
  #       run: |
  #         printenv
  #         docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --build -d worker

  #     - name: Wait another 30s for the containers to start
  #       uses: jakejarvis/wait-action@master
  #       with:
  #         time: "30s"

  #     - name: Dump docker logs before tests
  #       uses: jwalton/gh-docker-logs@v1

  #     - name: Run modelica job tests in Docker worker container
  #       run: |
  #         docker exec alfalfa_worker bash -c "cd /alfalfa && pytest -m docker tests/jobs/modelica -o log_cli=true -o log_level=info"

  #     - name: Run openstudio job tests in Docker worker container
  #       run: |
  #         docker exec alfalfa_worker bash -c "cd /alfalfa && pytest -m docker tests/jobs/openstudio -o log_cli=true -o log_level=info"

  #     - name: Dump docker logs on failure
  #       if: failure()
  #       uses: jwalton/gh-docker-logs@v1

  # integration-tests:
  #   name: Run integration tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.8"

  #     - name: Install poetry
  #       uses: abatilo/actions-poetry@v2.0.0
  #       with:
  #         poetry-version: 1.1.12

  #     - name: Build and run stack
  #       run: |
  #         printenv
  #         docker-compose up --build -d

  #     - name: Wait for web server
  #       uses: nev7n/wait_for_response@v1
  #       with:
  #         url: "http://localhost/"
  #         responseCode: 200
  #         timeout: 120000
  #         interval: 500

  #     - name: Wait another 30s
  #       uses: jakejarvis/wait-action@master
  #       with:
  #         time: "30s"

  #     - name: Dump docker logs before tests
  #       uses: jwalton/gh-docker-logs@v1

  #     - name: Run tests with pytest
  #       run: |
  #         poetry install
  #         poetry run pytest --timeout=600 -m "integration"

  #     - name: Dump docker logs on failure
  #       if: failure()
  #       uses: jwalton/gh-docker-logs@v1

  # integration-tests-historian:
  #   name: Run integration tests with historian
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.8"

  #     - name: Install poetry
  #       uses: abatilo/actions-poetry@v2.0.0
  #       with:
  #         poetry-version: 1.1.12

  #     - name: Build and run stack
  #       run: |
  #         export HISTORIAN_ENABLE=true
  #         printenv
  #         docker-compose -f docker-compose.yml -f docker-compose.historian.yml up --build -d

  #     - name: Wait for web server
  #       uses: nev7n/wait_for_response@v1
  #       with:
  #         url: "http://localhost/"
  #         responseCode: 200
  #         timeout: 120000
  #         interval: 500

  #     - name: Wait another 30s
  #       uses: jakejarvis/wait-action@master
  #       with:
  #         time: "30s"

  #     - name: Dump docker logs before tests
  #       uses: jwalton/gh-docker-logs@v1

  #     - name: Run tests with pytest
  #       run: |
  #         poetry install
  #         poetry run pytest --timeout=600 -m "integration"

  #     - name: Dump docker logs on failure
  #       if: failure()
  #       uses: jwalton/gh-docker-logs@v1

  # publish:
  #   if: |
  #     github.ref == 'refs/heads/main' ||
  #     github.ref == 'refs/heads/develop'
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Only if all other jobs pass.
  #     - name: Wait on tests
  #       uses: lewagon/wait-on-check-action@v0.2
  #       with:
  #         ref: ${{ github.ref }}
  #         running-workflow-name: "publish" #this job shouldn't wait for itself
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #         wait-interval: 20 # seconds

  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     # Install only toml, which is used to extract version.
  #     # We don't do anything else with Python in this job.
  #     - name: Install toml
  #       run: python -m pip install toml

  #     - name: Build & Publish Images
  #       shell: bash
  #       run: ./.github/workflows/publish_to_docker.sh
  #       env:
  #         DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  #         DOCKER_USER: ${{ secrets.DOCKER_USER }}
